#!/bin/bash

if [ -z "$1" ]; then
    echo "no arguments supplied"
    exit 1
fi

function utest() {
    for m in $@; do
        echo "MODULE ${m}"
        utest_path="./install/install/${m}/utest"
        if [ -d ${utest_path} ]; then
            for t in ${utest_path}/*; do
                if [ -x ${t} ]; then
                    echo "RUN ${t}"
                    ${t} || echo "FAILED ${t}"
                    echo
                fi
            done
        else
            echo -e "NO utest\n"
        fi
    done
}

if [ "$1" == "sync" ]; then
    make_git="/tmp/make.git"
    ./project.py sync > ${make_git} && make -f ${make_git} -j && rm ${make_git}
elif [ "$1" == "push" ]; then
    ./project.py push > ${make_git} && make -f ${make_git} -j && rm ${make_git}
elif [ "$1" == "gen" ]; then
    rm CMakeLists.txt
    ./project.py gen | tee CMakeLists.txt
elif [ "$1" == "cmake" ]; then
    echo "cmake -S . -B build -G Ninja"
    cmake -S . -B build -G Ninja
elif [ "$1" == "build" ]; then
    target=${2:-all}
    if [ "${target}" == "--" ]; then target="all"; fi
    args="$@"
    normal_args="${args%%-- *}" # all args until --
    if [[ "${normal_args}" != "${args}" ]]; then
        extra_args="${args##* --}" # all args after --
    fi
    echo "cmake --build build --target ${target} ${extra_args}"
    cmake --build build --target ${target} ${extra_args}
elif [ "$1" == "install" ]; then
    echo "cmake --install build"
    cmake --install build
elif [ "$1" == "utest" ]; then
    utest $(./project.py list cmake)
elif [ "$1" == "utest-dev" ]; then
    utest $(./project.py list develop)
else
    echo "unsupported argument: $1"
    exit 1
fi

